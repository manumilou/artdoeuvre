<?php
// $Id: plus1.module,v 1.1.4.8 2009/03/18 05:04:42 chill35 Exp $
/**
* @file
* A simple +1 voting widget module.
*/

/**
* Implementation of hook_perm().
*/
function plus1_perm() {
  return array('vote on content', 'administer the voting widget');
}

/**
* Implementation of hook_menu().
*/
function plus1_menu() {

  $items['plus1/vote/%'] = array(
    'title' => t('Vote'),
    'page callback' => 'plus1_vote',
    'page arguments' => array(2),
    'access arguments' => array('vote on content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/plus1'] = array(
    'title' => t('Plus 1'),
    'description' => t('Allows readers to vote on content.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plus1_settings'),
    'access arguments' => array('administer the voting widget'),
  );

  return $items;
}

/**
* Implementation of hook_init().
*/
function plus1_init() {
  variable_set('plus1_javascript_settings', 0);
}

/**
* Menu callback to configure module settings.
*/
function plus1_settings() {

  $form['plus1_nodetypes_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content type settings'),
    '#description' => t('Select all node types to which a +1 voting widget can be added.'),
  );

  $form['plus1_nodetypes_fieldset']['plus1_nodetypes'] = array(
    '#type' => 'checkboxes',
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('plus1_nodetypes', array('story')),
  );

  $form['plus1_display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display settings'),
    '#description' => t('You may select none, one or both options.'),
  );

  $form['plus1_display']['plus1_in_teaser'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add a +1 voting widget to the node in teaser view.'),
    '#default_value' => variable_get('plus1_in_teaser', 0),
  );

  $form['plus1_display']['plus1_in_full_view'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add a +1 voting widget to the node in full view.'),
    '#default_value' => variable_get('plus1_in_full_view', 1),
  );

  $form['plus1_text'] = array(
    '#type' => 'fieldset',
    '#title' => t('Text settings'),
  );

  $form['plus1_text']['plus1_you_voted'] = array(
    '#type' => 'textfield',
    '#title' => t('Feedback provided to voter when he already voted'),
    '#default_value' => variable_get('plus1_you_voted', t('You voted')),
    '#description' => t('Enter, for example, <em>Dugg</em>, <em>You voted</em>, or <em>Voted</em>.'),
  );
  
  $form['plus1_weight'] = array(
    '#type' => 'fieldset',
    '#title' => t('Weight settings'),
  );

  $form['plus1_weight']['plus1_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight of voting widget'),
    '#default_value' => variable_get('plus1_weight', '100'),
    '#description' => t('The higher the weight the lower in the node the widget will be added. Can be a negative number.'),
  );

  $form['array_filter'] = array('#type' => 'hidden');

  return system_settings_form($form);
}

/**
* Page callback.
* @param $nid
* A node ID.
* @param $ajax
* Equal to 'json' when the function is called by jQuery.
* Submits the vote request and refreshes the page without JavaScript.
* Otherwise, it submits the vote request and returns JSON to be parsed by jQuery.
*/
function plus1_vote($nid) {
  global $user;
  $json = isset($_GET['json']) ? 'json' : NULL;
  if (!drupal_valid_token($_GET['token'], $nid)) {
    watchdog('Plus1', 'Voting form error: Invalid token.');
    return drupal_access_denied();
  }

  $voted = plus1_get_votes($nid, $user->uid);
  // If the voter has not already voted.
  if (!$voted) {
    $votes[] = array(
      'content_id' => $nid,
      'value_type' => 'points',
      'value' => 1,
    );
    votingapi_set_votes($votes);
    $criteria = array(
      'content_id' => $nid,
      'function' => 'sum',
    );
    $results = votingapi_select_results($criteria);
    if ($json == 'json') {
      // This print statement will return results to jQuery's request.
      print drupal_json(array('score' => $results[0]['value'], 'voted' => check_plain(variable_get('plus1_you_voted', t('You voted')))));
      // printf('{"score": "%s", "voted": "%s"}', $results[0]['value'], check_plain(variable_get('plus1_you_voted', t('You voted'))));
    }
    else {
      // Go to the full node view.
      drupal_set_message(t('Thank you for your vote.'));
      drupal_goto('node/'. $nid);
    }
  }
}

/**
* Return the number of votes for a given node ID/user ID pair.
*
* @param $nid
* A node ID.
* @param $uid
* A user ID.
* @return Integer
* Number of votes the user has cast on this node.
*/
function plus1_get_votes($nid, $uid) {
  $criteria['content_id'] = $nid;
  $criteria['value_type'] = 'points';
  if ($uid == 0) {
    $criteria['vote_source'] = ip_address();
  }
  else {
    $criteria['uid'] = $uid;
  }
  $results = votingapi_select_votes($criteria);
  return count($results);
}

/**
* Return the total score of a node.
*
* @param $nid
* A node ID.
* @return Integer
* The score.
*/
function plus1_get_score($nid) {
  $criteria['content_id'] = $nid;
  $criteria['value_type'] = 'points';
  $criteria['function'] = 'sum';
  $results = votingapi_select_results($criteria);
  if (empty($results)) {
    return 0;
  }
  else {
    return $results[0]['value'];
  }
}

/**
* Create voting widget to display on the webpage.
*/
function plus1_jquery_widget($node, $teaser, $page) {
  $score = plus1_get_score($node->nid);
  global $user;
  // If user is not logged-in.
  if ($user->uid == 0) {
    $logged_in = FALSE;
    $is_author = FALSE;
  }
  else {
    $logged_in = TRUE;
    $is_author = ($node->uid == $user->uid)? TRUE : FALSE;
  }
  $voted = plus1_get_votes($node->nid, $user->uid);
  return theme('plus1_widget', $node, $score, $logged_in, $is_author, $voted, $teaser, $page);
}

/**
* Implementation of hook_nodeapi().
*/
function plus1_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'view':
      // Only show the voting widget in allowed content types.
      if (in_array($node->type, variable_get('plus1_nodetypes', array('story')))) {
        // Show the widget.
        if (($teaser && variable_get('plus1_in_teaser', 0)) || (!$teaser && variable_get('plus1_in_full_view', 1))) {
          $node->content['plus1_widget'] = array(
            '#value' => plus1_jquery_widget($node, $teaser, $page),
            '#weight' => (int) variable_get('plus1_weight', '100'),
          );
        }
      }
      break;
    case 'delete':
      $criteria['content_id'] = $node->nid;
      $votes = votingapi_select_votes($criteria);
      votingapi_delete_votes($votes);
      break;
  }
}

/**
* Implementation of hook_theme().
*/
function plus1_theme() {
  return array(
    'plus1_widget' => array(
      'arguments' => array('node', 'score', 'logged_in', 'is_author', 'voted', 'teaser', 'page'),
    ),
  );
}

/**
* Theme for the voting widget.
*
* You are free to load your own CSS and JavaScript files in your
* theming function override, instead of the ones provided by default.
*
* This function adds information to the Drupal.settings.plus1 JS object,
* concerning class names used for the voting widget.
* If you override this theming function but choose to use the
* default JavaScript file, simply assign different values to
* the following variables:
*    $widget_class   (The wrapper element for the voting widget.)
*    $link_class     (The anchor element to cast a vote.)
*    $message_class  (The wrapper element for the anchor element. May contain feedback when the vote has been cast.)
*    $score_class    (The placeholder element for the score.)
* The JavaScript looks for these CSS hooks to
* update the voting widget after a vote is cast.
* Of course you may choose to write your own JavaScript.
* The JavaScript adds presentation, ie: fade in.
*
*/
function theme_plus1_widget($node, $score, $logged_in, $is_author, $voted, $teaser, $page) {

  // Load the JavaScript and CSS files.
  // You are free to load your own JavaScript files in your theming function to override.
  drupal_add_js(drupal_get_path('module', 'plus1') .'/jquery.plus1.js');
  drupal_add_css(drupal_get_path('module', 'plus1') .'/plus1.css');

  // Defining CSS hooks to be used in the JavaScript.
  $widget_class = 'plus1-widget';
  $link_class = 'plus1-link';
  $message_class = 'plus1-msg';
  $score_class = 'plus1-score';

  // Attaching these hooks names to the Drupal.settings.plus1 JavaScript object.
  // So these class names are NOT hard-coded in the JavaScript.
  if (variable_get('plus1_javascript_settings', 0) == 0) {
    drupal_add_js(array('plus1' => array('widget_class' => $widget_class, 'link_class' => $link_class, 'message_class' => $message_class, 'score_class' => $score_class)), 'setting');
    variable_set('plus1_javascript_settings', 1);
  }

  // And now we output the HTML.
  $output = '<div class="'. $widget_class .'">';
  if (!$logged_in || user_access('vote on content')) {
    $output .= '<div class="'. $message_class . '">';
    if (!$logged_in && !user_access('vote on content')) {
      $output .= '<small>'. l(t('Log in<br />to vote'), 'user', array('html' => TRUE)) .'</small>';
    }
    else if ($voted) { // User already voted.
      $output .= check_plain(variable_get('plus1_you_voted', t('You voted')));
    }
    else if (user_access('vote on content')) {
      // User is eligible to vote.
      // The class name provided by Drupal.settings.plus1.link_class what we will search for in our jQuery later.
      $output .= '<div class="plus1-vote">' . l(t('Vote'), 'plus1/vote/' . $node->nid,
        array('query' => 'token=' . drupal_get_token($node->nid), 'attributes' => array('class' => $link_class))) . '</div>';
    }
    $output .= '</div>';
  }
  $output .= '<div class="'. $score_class .'">';
  $output .= $score;
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}